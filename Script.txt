Python Course Script

1- Variables
--Global Variables: ..
X = 5
def getX():
print(X)
# global X
X = 10
print(X)
print(X)
............
Methods (built-in Functions)
message = "Hello World"
print(message.lower())
print(message.upper())
.
.
.
__2__
print(min(2,3,1,0,9))
print(max(2,3,1,0,9))
print(sum( [2,3,1,0,9] ))
print(pow(5,2))
print(5**2)
print(type("Hello"))
print(int("100"))
print(str(7))
............
advanced data types
Lst = [1,10,100]
print(Lst)
print(*Lst)
Lst[0] = 0
Lst.append(1000)
Lst.pop()
Lst.sort()

print(Lst[0])
print(Lst[1:])
Tupl = (1,10,100) or Tupl(Lst)
print(Tupl)
print(*Tupl)
# Tupl[0] = 0
Tupl.count(item) , Tupl.index(item)
print(Tupl[0])
print(Tupl[1:])
Set = {1,1,10,100} or set(Tupl) or {10,1,100}
# indexes X
Set.add(item), Set.remove(item),Set.pop()
St1 = {1,3,5}
St2 = {2,4,6}
print( St1 & St2 ) Union
print( St1 | St2 ) intersection
print( St1 - St2 ) difference
Dict = {1: "One",
2: "Two",
3: "Three"
}
print(Dict[3]) or print(Dict.get(3))
Dict[10] = "Ten"
print(Dict)
print(Dict.keys())
print(Dict.values())
print(Dict.pop(3))
print(Dict)
ÇßÊÑ list ÈÓ ÇÍäÇ ÈäÓÊÎÏã Çá
.............
For loop in Data Types
¿ loop for ÇÒÇí ÊáÝ Úáí ÇáÚäÇÕÑ ÈÇá
__1__
names = ["Muhammad", "Ali", "Sayed"]
for idx in range(len(names)):
print(names[i])
for name in names:

print(name)
for index, name in enumerate(names):
print(index,name)
Or
print(index+1,name)
__2__
names = ["Muhammad", "Ali", "Sayed"]
salaries = [1000, 2000, 3000]
for name,salary in zip(names, salaries):
print(name,salary)
__3__
employees = { "Muhammad":1000,
"Ali": 2000,
"Sayed":3000
}

for name, salary in employees.items():
print(name, salary)
.............
Take lists from users
áæ ßÇäÊ äÕæÕ ÈäßÊÈ list ØíÈ ÇÒÇí äÇÎÏ ãä ÇáãÓÊÎÏã
lstrings = list(input()) X
lstrings = list(input().split())
áæ ßÇäÊ ÇÑÞÇã ÈäßÊÈ
nums = list(map(int, input().split()))
Functional programming
ÇÔåÑ ? ÝÇäßÔäÒ Ýíå
map() - filter() - reduce()
ÝÇáãÇÈ æÇÍÏå ãäåã
list ÈÊÇÎÏ ãäß ÇÓã ÝÇäßÔä æÇá
list æÈÊäÝÐ ÇáÝÇäßÔä Ïí Úáí ßá ÚäÕÑ Ý Çá
ãËÇá ÚáÔÇä äÝåã
print(["11","22","33"])
print(map(int, ["11","22","33"]))
print(list(map(int, ["11","22","33"])))
æãä åäÇ äÑÌÚ áãËÇáäÇ ÇÇáæá ÇÒÇí ÊÇÎÏ áíÓÊ ãä ÇÇáÑÞÇã ãä ÇáãÓÊÎÏã æÊÊØÈÚ ÇÇáÑÞÇã ãÊÑÊÈÉ

nums = list(map(int, input().split()))
print(sorted(nums))
.............
ternary writing case ( if&else )
x, y= 10, 5
if x > y:
N = x
else:
N = y
print(N)
Or
N = x if x > y else y
print(N)
æããßä äßÊÈå ßãÇä Ý ÓØÑ ßæÏ æÇÍÏ
N = x if x > y else y; print(N)
__2__
print("Great x" if x > y else "Great y")
print("Great x" if x > y else "Great y" if x < y else "same")
Or
if x>y:
print("Great x")
elif x<y:
print("Great y")
else:
print("same")
.............
ternary writing case for loop
Lst = []
for i in range(10):
Lst.append(i)
print(Lst)
Or

Lst = [i for i in range(10)]
print(Lst)
__2__
Lst = []
for i in range(10):
if i != 5:
Lst.append(i)
print(Lst)
Or
Lst = [i for i in range(10) if i != 5]; print(Lst)
..............
Ternary in advanced data types
lst1 = [i for i in range(10)]; print(lst1)
set1 = {i for i in range(10)}; print(set1)
dict1 = {i:i*2 for i in range(10)}; print(dict1)
generator = (i for i in range(10))
print(generator)
print(*generator)
print(next(generator))
print(next(generator))
print(next(generator))
.............
Functions
def sum2num(x, y):
return sum( [x, y] )
print(sum2num(5,4))
lambda ØÑíÞÉ ÊÇäíå ÈÇÓÊÎÏÇã Çá
sum2num = lambda x,y: x+y
print(sum2num(5,4))
__2__
*Args

def sumNnum(*lst):
return sum(lst)
print(sumNnum(5,4,1,10))
lambda ØÑíÞÉ ÊÇäíå ÈÇÓÊÎÏÇã Çá
sumNnum = lambda *lst: sum(lst)
print(sumNnum(5,4,1,10))
kwargs **æÝíå ÍÇÌå ßãÇä ÇÓãåÇ ßæÇÑÌÓ ÈÓ ãÔ ÍÊÍÊÇÌåÇ Ý ÇáæÞÊ ÇáÍÇáí ÊÞÏÑ ÊÓÑÔ ÚäåÇ áÅáØÇáÚ
.............
Import modules
import math
print(math.sqrt(25))
print(math.pi)
from math import sqrt, pi
print(sqrt(25))
print(pi)
.............
What next ?
1- OOP & SOLID Princeples
2- Data Structures & Algorithms
3- Learn Track
.............
